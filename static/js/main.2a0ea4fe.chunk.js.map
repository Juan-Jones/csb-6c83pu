{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","zipList","setZipList","newZip","setNewZip","addNewZip","trimmed","trim","includes","concat","className","viewBox","height","width","d","type","maxLength","placeholder","onChange","event","value","currentTarget","replace","onKeyPress","e","callback","key","onClick","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA4DeA,MAzDf,WAAgB,IAAD,EACiBC,IAAMC,SAAmB,IAD1C,mBACNC,EADM,KACGC,EADH,OAEeH,IAAMC,SAAiB,IAFtC,mBAENG,EAFM,KAEEC,EAFF,KAiBPC,EAAY,WAChB,IAAMC,EAAUH,EAAOI,OACnBD,IAAYL,EAAQO,SAASF,IAC/BJ,EAAWD,EAAQQ,OAAOH,KAI9B,OACE,qBAAKI,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,+BACE,qBAAKC,QAAQ,YAAYC,OAAO,MAAMC,MAAM,MAA5C,SACE,sBAAMC,EAAE,iiBAFZ,cAMA,sBAAKJ,UAAU,cAAf,UACE,uBACEK,KAAK,OACLC,UAAW,EACXC,YAAY,gBACZC,SA7BgB,SAACC,GAGzB,IAAIC,EAAQD,EAAME,cAAcD,MAChCA,EAAQA,EAAME,QAAQ,MAAO,IAC7BlB,EAAUgB,IAyBFA,MAAOjB,EACPoB,WAAY,SAACC,GAAD,OAlCpBC,EAmCqBpB,EAlCJ,UAkCCmB,EAlCTE,KAAmBD,IAHd,IAEdA,KAsCM,wBAAQE,QAAStB,EAAjB,kBAGF,6BACGJ,EAAQ2B,KAAI,SAACJ,GAAD,OACX,6BAAaA,GAAJA,cCtCNK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2a0ea4fe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [zipList, setZipList] = React.useState<string[]>([]);\n  const [newZip, setNewZip] = React.useState<string>(\"\");\n\n  const onEnter = (\n    event: React.KeyboardEvent<HTMLInputElement>,\n    callback: { (): void; (): any }\n  ) => event.key === \"Enter\" && callback();\n\n  const handleInputChange = (event: {\n    currentTarget: { maxLength: number; value: any };\n  }) => {\n    let value = event.currentTarget.value;\n    value = value.replace(/\\D/g, \"\");\n    setNewZip(value);\n  };\n\n  const addNewZip = () => {\n    const trimmed = newZip.trim();\n    if (trimmed && !zipList.includes(trimmed)) {\n      setZipList(zipList.concat(trimmed));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"meio\">\n        <h1>\n          <svg viewBox=\"0 0 20 20\" height=\"2em\" width=\"2em\">\n            <path d=\"M10,1.375c-3.17,0-5.75,2.548-5.75,5.682c0,6.685,5.259,11.276,5.483,11.469c0.152,0.132,0.382,0.132,0.534,0c0.224-0.193,5.481-4.784,5.483-11.469C15.75,3.923,13.171,1.375,10,1.375 M10,17.653c-1.064-1.024-4.929-5.127-4.929-10.596c0-2.68,2.212-4.861,4.929-4.861s4.929,2.181,4.929,4.861C14.927,12.518,11.063,16.627,10,17.653 M10,3.839c-1.815,0-3.286,1.47-3.286,3.286s1.47,3.286,3.286,3.286s3.286-1.47,3.286-3.286S11.815,3.839,10,3.839 M10,9.589c-1.359,0-2.464-1.105-2.464-2.464S8.641,4.661,10,4.661s2.464,1.105,2.464,2.464S11.359,9.589,10,9.589\"></path>\n          </svg>\n          City Map\n        </h1>\n        <div className=\"placeholder\">\n          <input\n            type=\"text\"\n            maxLength={8}\n            placeholder=\"Search Cities\"\n            onChange={handleInputChange}\n            value={newZip}\n            onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) =>\n              onEnter(e, addNewZip)\n            }\n          />\n          <button onClick={addNewZip}>+</button>\n        </div>\n\n        <ul>\n          {zipList.map((e: any) => (\n            <li key={e}>{e}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// <ul className=\"quadrado\">\n// <li>\n//   <div>\n//     <strong>city</strong>\n//   </div>\n//   <div>\n//     <small>cep</small>\n//   </div>\n//     <span>street, neighborhood - state</span>\n// </li>\n// </ul>\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}